services:
  postgres:
    image: postgres
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      PGDATA: '/var/lib/postgresql/data/pgdata'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U {USER} -d {DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    networks:
      - main

  backend:
    build: .
    environment:
      DJANGO_SECRET_KEY:
      DJANGO_DEBUG:
      DJANGO_ALLOWED_HOSTS:
      POSTGRES_NAME:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      POSTGRES_HOST:
      POSTGRES_PORT:
    command: >
      sh -c "
        python manage.py makemigrations scanlate &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl --fail http://0.0.0.0:8000/ || exit 1
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - main

  nginx:
    build: nginx/
    environment:
      SERVER_HOST: backend
      SERVER_PORT: 8000
      NGINX_HOST:
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    restart: unless-stopped
    networks:
      - main
    ports:
      - 80:80
      - 443:443
    depends_on:
      backend:
        condition: service_healthy

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email amirkhdaur@gmail.com -d mcserver.tw1.ru --agree-tos
    depends_on:
      nginx:
        condition: service_started

volumes:
  pgdata:
  certbot-conf:
  certbot-www:

networks:
  main:
    driver: bridge