services:
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: '/var/lib/postgresql/data/pgdata'
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    networks:
      - main

  backend:
    build: .
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      POSTGRES_NAME: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REMANGA_TOKEN: ${REMANGA_TOKEN}
      REMANGA_TEAM_ID: ${REMANGA_TEAM_ID}
    command: >
      sh -c "
        python manage.py makemigrations scanlate &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl --fail http://0.0.0.0:8000/api/healthcheck/ || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - main

  nginx:
    image: nginx
    environment:
      SERVER_HOST: backend
      SERVER_PORT: 8000
      NGINX_HOST: ${DOMAIN}
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    restart: unless-stopped
    networks:
      - main
    ports:
      - 80:80
      - 443:443
    depends_on:
      backend:
        condition: service_healthy

volumes:
  pgdata:

networks:
  main:
    driver: bridge